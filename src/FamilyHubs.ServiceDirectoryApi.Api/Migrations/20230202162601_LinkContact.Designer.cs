// <auto-generated />
using System;
using FamilyHubs.ServiceDirectory.Infrastructure.Persistence.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace fhservicedirectoryapi.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230202162601_LinkContact")]
    partial class LinkContact
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.AccessibilityForDisabilities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Accessibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("AccessibilityForDisabilities");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.AdminArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AdminAreas");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TextPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.CostOption", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("AmountDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("CostOptions");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EligibilityDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Eligibilities");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Funding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Fundings");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.HolidaySchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClosesAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OpensAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceAtLocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceAtLocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("HolidaySchedules");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.LinkContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("LinkId");

                    b.ToTable("LinkContacts");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.LinkTaxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("TaxonomyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TaxonomyId");

                    b.ToTable("LinkTaxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganisationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.OrganisationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationTypes");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Parent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.PhysicalAddress", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StateProvince")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PhysicalAddresses");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.RegularSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ByDay")
                        .HasColumnType("text");

                    b.Property<string>("ByMonthDay")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosesAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DtStart")
                        .HasColumnType("text");

                    b.Property<string>("Freq")
                        .HasColumnType("text");

                    b.Property<string>("Interval")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OpensAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceAtLocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceAtLocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RegularSchedules");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.RelatedOrganisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelatedOrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("RelatedOrganisations");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Review", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationId")
                        .HasColumnType("text");

                    b.Property<string>("Score")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Widget")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Accreditations")
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssuredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AttendingAccess")
                        .HasColumnType("text");

                    b.Property<string>("AttendingType")
                        .HasColumnType("text");

                    b.Property<bool>("CanFamilyChooseDeliveryLocation")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeliverableType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Fees")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganisationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Extent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceAreaDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAreas");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceAtLocations");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceDelivery", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDeliveries");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceTaxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxonomyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxonomyId");

                    b.ToTable("ServiceTaxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EligibilityId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Parent")
                        .HasColumnType("text");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EligibilityId");

                    b.ToTable("Taxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.UiCache", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UiCaches");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.AccessibilityForDisabilities", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("AccessibilityForDisabilities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.CostOption", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("CostOptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Eligibilities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Funding", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Fundings")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.HolidaySchedule", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", null)
                        .WithMany("HolidaySchedules")
                        .HasForeignKey("ServiceAtLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("HolidaySchedules")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Language", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Languages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.LinkContact", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("LinkContacts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany("LinkContacts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("LinkContacts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", null)
                        .WithMany("LinkContacts")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.LinkTaxonomy", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("LinkTaxonomies")
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Parent", null)
                        .WithMany("LinkTaxonomies")
                        .HasForeignKey("ParentId");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyId");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.PhysicalAddress", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("PhysicalAddresses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.RegularSchedule", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", null)
                        .WithMany("RegularSchedules")
                        .HasForeignKey("ServiceAtLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("RegularSchedules")
                        .HasForeignKey("ServiceId");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Review", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany("Services")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceArea", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceAreas")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceAtLocations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceDelivery", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceDeliveries")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceTaxonomy", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Parent", null)
                        .WithMany("ServiceTaxonomies")
                        .HasForeignKey("ParentId");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceTaxonomies")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyId");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", null)
                        .WithMany("Taxonomies")
                        .HasForeignKey("EligibilityId");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", b =>
                {
                    b.Navigation("Taxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Location", b =>
                {
                    b.Navigation("AccessibilityForDisabilities");

                    b.Navigation("LinkContacts");

                    b.Navigation("LinkTaxonomies");

                    b.Navigation("PhysicalAddresses");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", b =>
                {
                    b.Navigation("LinkContacts");

                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Parent", b =>
                {
                    b.Navigation("LinkTaxonomies");

                    b.Navigation("ServiceTaxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.Navigation("CostOptions");

                    b.Navigation("Eligibilities");

                    b.Navigation("Fundings");

                    b.Navigation("HolidaySchedules");

                    b.Navigation("Languages");

                    b.Navigation("LinkContacts");

                    b.Navigation("RegularSchedules");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceAreas");

                    b.Navigation("ServiceAtLocations");

                    b.Navigation("ServiceDeliveries");

                    b.Navigation("ServiceTaxonomies");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceAtLocation", b =>
                {
                    b.Navigation("HolidaySchedules");

                    b.Navigation("LinkContacts");

                    b.Navigation("RegularSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
