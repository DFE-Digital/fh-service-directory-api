// <auto-generated />
using System;
using FamilyHubs.ServiceDirectory.Infrastructure.Persistence.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FamilyHubs.ServiceDirectory.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230310171918_CreateIntialSchema")]
    partial class CreateIntialSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.AccessibilityForDisabilities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Accessibility")
                        .HasColumnType("text")
                        .HasColumnName("accessibility");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("locationid");

                    b.HasKey("Id")
                        .HasName("pk_accessibilityfordisabilities");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_accessibilityfordisabilities_locationid");

                    b.ToTable("accessibilityfordisabilities", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telephone");

                    b.Property<string>("TextPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("textphone");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.CostOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("AmountDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("amountdescription");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Option")
                        .HasColumnType("text")
                        .HasColumnName("option");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validfrom");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validto");

                    b.HasKey("Id")
                        .HasName("pk_costoptions");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_costoptions_serviceid");

                    b.ToTable("costoptions", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("EligibilityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eligibilitytype");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<int>("MaximumAge")
                        .HasColumnType("integer")
                        .HasColumnName("maximumage");

                    b.Property<int>("MinimumAge")
                        .HasColumnType("integer")
                        .HasColumnName("minimumage");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.HasKey("Id")
                        .HasName("pk_eligibilities");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_eligibilities_serviceid");

                    b.ToTable("eligibilities", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Funding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_fundings");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_fundings_serviceid");

                    b.ToTable("fundings", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.HolidaySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean")
                        .HasColumnName("closed");

                    b.Property<DateTime?>("ClosesAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closesat");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enddate");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("locationid");

                    b.Property<DateTime?>("OpensAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opensat");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("pk_holidayschedules");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_holidayschedules_locationid");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_holidayschedules_serviceid");

                    b.ToTable("holidayschedules", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_languages_serviceid");

                    b.ToTable("languages", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("text")
                        .HasColumnName("address2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locationtype");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("postcode");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("stateprovince");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminAreaCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("adminareacode");

                    b.Property<long?>("AssociatedOrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("associatedorganisationid");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Logo")
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("OrganisationType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("organisationtype");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_organisations");

                    b.ToTable("organisations", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.RegularSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ByDay")
                        .HasColumnType("text")
                        .HasColumnName("byday");

                    b.Property<string>("ByMonthDay")
                        .HasColumnType("text")
                        .HasColumnName("bymonthday");

                    b.Property<DateTime?>("ClosesAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closesat");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DtStart")
                        .HasColumnType("text")
                        .HasColumnName("dtstart");

                    b.Property<string>("Freq")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("freq");

                    b.Property<string>("Interval")
                        .HasColumnType("text")
                        .HasColumnName("interval");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("locationid");

                    b.Property<DateTime?>("OpensAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opensat");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validfrom");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("validto");

                    b.Property<string>("Weekday")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weekday");

                    b.HasKey("Id")
                        .HasName("pk_regularschedules");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_regularschedules_locationid");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_regularschedules_serviceid");

                    b.ToTable("regularschedules", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationid");

                    b.Property<string>("Score")
                        .HasColumnType("text")
                        .HasColumnName("score");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("Widget")
                        .HasColumnType("text")
                        .HasColumnName("widget");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_reviews_organisationid");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_reviews_serviceid");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Accreditations")
                        .HasColumnType("text")
                        .HasColumnName("accreditations");

                    b.Property<DateTime?>("AssuredDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assureddate");

                    b.Property<string>("AttendingAccess")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attendingaccess");

                    b.Property<string>("AttendingType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("attendingtype");

                    b.Property<bool>("CanFamilyChooseDeliveryLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("canfamilychoosedeliverylocation");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("DeliverableType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deliverabletype");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Fees")
                        .HasColumnType("text")
                        .HasColumnName("fees");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organisationid");

                    b.Property<string>("ServiceOwnerReferenceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serviceownerreferenceid");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("servicetype");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("OrganisationId")
                        .HasDatabaseName("ix_services_organisationid");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<string>("Extent")
                        .HasColumnType("text")
                        .HasColumnName("extent");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("ServiceAreaName")
                        .HasColumnType("text")
                        .HasColumnName("serviceareaname");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<string>("Uri")
                        .HasColumnType("text")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_serviceareas");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_serviceareas_serviceid");

                    b.ToTable("serviceareas", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.HasKey("Id")
                        .HasName("pk_servicedeliveries");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_servicedeliveries_serviceid");

                    b.ToTable("servicedeliveries", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("createdby");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parentid");

                    b.Property<string>("TaxonomyType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("taxonomytype");

                    b.HasKey("Id")
                        .HasName("pk_taxonomies");

                    b.ToTable("taxonomies", (string)null);
                });

            modelBuilder.Entity("linkcontacts", b =>
                {
                    b.Property<long>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contactid");

                    b.Property<long?>("LinkId")
                        .HasColumnType("bigint")
                        .HasColumnName("linkid");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("linktype");

                    b.HasKey("ContactId", "LinkId")
                        .HasName("pk_linkcontacts");

                    b.HasIndex("LinkId")
                        .HasDatabaseName("ix_linkcontacts_linkid");

                    b.ToTable("linkcontacts", (string)null);
                });

            modelBuilder.Entity("linktaxonomies", b =>
                {
                    b.Property<long?>("LinkId")
                        .HasColumnType("bigint")
                        .HasColumnName("linkid");

                    b.Property<long>("TaxonomyId")
                        .HasColumnType("bigint")
                        .HasColumnName("taxonomyid");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("linktype");

                    b.HasKey("LinkId", "TaxonomyId")
                        .HasName("pk_linktaxonomies");

                    b.HasIndex("TaxonomyId")
                        .HasDatabaseName("ix_linktaxonomies_taxonomyid");

                    b.ToTable("linktaxonomies", (string)null);
                });

            modelBuilder.Entity("serviceatlocations", b =>
                {
                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("locationid");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.HasKey("LocationId", "ServiceId")
                        .HasName("pk_serviceatlocations");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_serviceatlocations_serviceid");

                    b.ToTable("serviceatlocations", (string)null);
                });

            modelBuilder.Entity("servicetaxonomies", b =>
                {
                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceid");

                    b.Property<long>("TaxonomyId")
                        .HasColumnType("bigint")
                        .HasColumnName("taxonomyid");

                    b.HasKey("ServiceId", "TaxonomyId")
                        .HasName("pk_servicetaxonomies");

                    b.HasIndex("TaxonomyId")
                        .HasDatabaseName("ix_servicetaxonomies_taxonomyid");

                    b.ToTable("servicetaxonomies", (string)null);
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.AccessibilityForDisabilities", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("AccessibilityForDisabilities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accessibilityfordisabilities_locations_locationid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.CostOption", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("CostOptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_costoptions_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Eligibilities")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_eligibilities_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Funding", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Fundings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_fundings_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.HolidaySchedule", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("HolidaySchedules")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_holidayschedules_locations_locationid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("HolidaySchedules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_holidayschedules_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Language", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Languages")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_languages_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.RegularSchedule", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany("RegularSchedules")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regularschedules_locations_locationid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("RegularSchedules")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_regularschedules_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Review", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_organisations_organisationid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany("Services")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_organisations_organisationid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceArea", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceAreas")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_serviceareas_services_serviceid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.ServiceDelivery", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany("ServiceDeliveries")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servicedeliveries_services_serviceid");
                });

            modelBuilder.Entity("linkcontacts", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linkcontacts_contacts_contactid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linkcontacts_locations_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linkcontacts_organisations_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linkcontacts_services_linkid");
                });

            modelBuilder.Entity("linktaxonomies", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.CostOption", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linktaxonomies_costoptions_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Eligibility", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linktaxonomies_eligibilities_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linktaxonomies_organisations_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.ServiceArea", null)
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linktaxonomies_serviceareas_linkid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", null)
                        .WithMany()
                        .HasForeignKey("TaxonomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_linktaxonomies_taxonomies_taxonomyid");
                });

            modelBuilder.Entity("serviceatlocations", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_serviceatlocations_locations_locationid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_serviceatlocations_services_serviceid");
                });

            modelBuilder.Entity("servicetaxonomies", b =>
                {
                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servicetaxonomies_services_serviceid");

                    b.HasOne("FamilyHubs.ServiceDirectory.Core.Entities.Taxonomy", null)
                        .WithMany()
                        .HasForeignKey("TaxonomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servicetaxonomies_taxonomies_taxonomyid");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Location", b =>
                {
                    b.Navigation("AccessibilityForDisabilities");

                    b.Navigation("HolidaySchedules");

                    b.Navigation("RegularSchedules");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Organisation", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FamilyHubs.ServiceDirectory.Core.Entities.Service", b =>
                {
                    b.Navigation("CostOptions");

                    b.Navigation("Eligibilities");

                    b.Navigation("Fundings");

                    b.Navigation("HolidaySchedules");

                    b.Navigation("Languages");

                    b.Navigation("RegularSchedules");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceAreas");

                    b.Navigation("ServiceDeliveries");
                });
#pragma warning restore 612, 618
        }
    }
}
