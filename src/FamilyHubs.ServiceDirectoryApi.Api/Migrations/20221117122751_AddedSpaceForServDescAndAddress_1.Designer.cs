// <auto-generated />

#nullable disable

using fh_service_directory_api.infrastructure.Persistence.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace fh_service_directory_api.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221117122751_AddedSpaceForServDescAndAddress_1")]
    partial class AddedSpaceForServDescAndAddress_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("fh_service_directory_api.core.Entities.Accessibility_For_Disabilities", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Accessibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralLocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralLocationId");

                    b.ToTable("Accessibility_For_Disabilities");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.ModelLink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ModelOneId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModelTwoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ModelLinks");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralContact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralContacts");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralCost_Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Amount_description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Option")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Valid_from")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Valid_to")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralCost_Options");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralEligibility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Eligibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<int>("Maximum_age")
                        .HasColumnType("integer");

                    b.Property<int>("Minimum_age")
                        .HasColumnType("integer");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralEligibilities");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralFunding", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralFundings");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralHoliday_Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Closes_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("End_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceAtLocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Opens_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Start_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceAtLocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralHoliday_Schedules");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralLanguages");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLinktaxonomycollection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Link_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralParentId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralTaxonomyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralParentId");

                    b.HasIndex("OpenReferralTaxonomyId");

                    b.ToTable("OpenReferralLinktaxonomycollections");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenReferralLocations");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralOrganisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrganisationTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationTypeId");

                    b.ToTable("OpenReferralOrganisations");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralParent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OpenReferralParents");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralPhone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralContactId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralContactId");

                    b.ToTable("OpenReferralPhones");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralPhysical_Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address_1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralLocationId")
                        .HasColumnType("text");

                    b.Property<string>("Postal_code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State_province")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralLocationId");

                    b.ToTable("OpenReferralPhysical_Addresses");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralRegular_Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Byday")
                        .HasColumnType("text");

                    b.Property<string>("Bymonthday")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Closes_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Dtstart")
                        .HasColumnType("text");

                    b.Property<string>("Freq")
                        .HasColumnType("text");

                    b.Property<string>("Interval")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceAtLocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Opens_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Valid_from")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Valid_to")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceAtLocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralRegular_Schedules");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralOrganisationId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Score")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("Widget")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralOrganisationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralReviews");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Accreditations")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Assured_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Attending_access")
                        .HasColumnType("text");

                    b.Property<string>("Attending_type")
                        .HasColumnType("text");

                    b.Property<bool>("CanFamilyChooseDeliveryLocation")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Deliverable_type")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fees")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OpenReferralOrganisationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceTypeId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralOrganisationId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("OpenReferralServices");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService_Area", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Extent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Service_area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralService_Areas");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService_Taxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LinkId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralParentId")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxonomyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralParentId");

                    b.HasIndex("OpenReferralServiceId");

                    b.HasIndex("TaxonomyId");

                    b.ToTable("OpenReferralService_Taxonomies");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralServiceAtLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralServiceAtLocations");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralServiceDelivery", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceDelivery")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralServiceId");

                    b.ToTable("OpenReferralServiceDeliveries");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralTaxonomy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OpenReferralEligibilityId")
                        .HasColumnType("text");

                    b.Property<string>("Parent")
                        .HasColumnType("text");

                    b.Property<string>("Vocabulary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenReferralEligibilityId");

                    b.ToTable("OpenReferralTaxonomies");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OrganisationAdminDistrict", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OpenReferralOrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationAdminDistricts");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OrganisationType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("OrganisationTypes");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.RelatedOrganisation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("OrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RelatedOrganisationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("RelatedOrganisations");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.ServiceType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.UICache", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("Created")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UICaches");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.Accessibility_For_Disabilities", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralLocation", null)
                        .WithMany("Accessibility_for_disabilities")
                        .HasForeignKey("OpenReferralLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralContact", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Contacts")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralCost_Option", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Cost_options")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralEligibility", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Eligibilities")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralFunding", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Fundings")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralHoliday_Schedule", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralServiceAtLocation", null)
                        .WithMany("HolidayScheduleCollection")
                        .HasForeignKey("OpenReferralServiceAtLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Holiday_schedules")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLanguage", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Languages")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLinktaxonomycollection", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralParent", null)
                        .WithMany("LinkTaxonomyCollection")
                        .HasForeignKey("OpenReferralParentId");

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralTaxonomy", null)
                        .WithMany("LinkTaxonomyCollection")
                        .HasForeignKey("OpenReferralTaxonomyId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralOrganisation", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OrganisationType", "OrganisationType")
                        .WithMany()
                        .HasForeignKey("OrganisationTypeId");

                    b.Navigation("OrganisationType");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralPhone", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralContact", null)
                        .WithMany("Phones")
                        .HasForeignKey("OpenReferralContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralPhysical_Address", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralLocation", null)
                        .WithMany("Physical_addresses")
                        .HasForeignKey("OpenReferralLocationId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralRegular_Schedule", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralServiceAtLocation", null)
                        .WithMany("Regular_schedule")
                        .HasForeignKey("OpenReferralServiceAtLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Regular_schedules")
                        .HasForeignKey("OpenReferralServiceId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralReview", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralOrganisation", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OpenReferralOrganisationId");

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Reviews")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralOrganisation", null)
                        .WithMany("Services")
                        .HasForeignKey("OpenReferralOrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fh_service_directory_api.core.Entities.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService_Area", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Service_areas")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService_Taxonomy", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralParent", null)
                        .WithMany("ServiceTaxonomyCollection")
                        .HasForeignKey("OpenReferralParentId");

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Service_taxonomys")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralTaxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyId");

                    b.Navigation("Taxonomy");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralServiceAtLocation", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("Service_at_locations")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralServiceDelivery", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralService", null)
                        .WithMany("ServiceDelivery")
                        .HasForeignKey("OpenReferralServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralTaxonomy", b =>
                {
                    b.HasOne("fh_service_directory_api.core.Entities.OpenReferralEligibility", null)
                        .WithMany("Taxonomys")
                        .HasForeignKey("OpenReferralEligibilityId");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralContact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralEligibility", b =>
                {
                    b.Navigation("Taxonomys");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralLocation", b =>
                {
                    b.Navigation("Accessibility_for_disabilities");

                    b.Navigation("Physical_addresses");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralOrganisation", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralParent", b =>
                {
                    b.Navigation("LinkTaxonomyCollection");

                    b.Navigation("ServiceTaxonomyCollection");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralService", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Cost_options");

                    b.Navigation("Eligibilities");

                    b.Navigation("Fundings");

                    b.Navigation("Holiday_schedules");

                    b.Navigation("Languages");

                    b.Navigation("Regular_schedules");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceDelivery");

                    b.Navigation("Service_areas");

                    b.Navigation("Service_at_locations");

                    b.Navigation("Service_taxonomys");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralServiceAtLocation", b =>
                {
                    b.Navigation("HolidayScheduleCollection");

                    b.Navigation("Regular_schedule");
                });

            modelBuilder.Entity("fh_service_directory_api.core.Entities.OpenReferralTaxonomy", b =>
                {
                    b.Navigation("LinkTaxonomyCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
